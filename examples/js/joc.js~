window.onload = function (){
    
  //Avisa que el documents està ready
  console.log( "ready!" );
  
  
  //variables del joc_run2live
  var enemyYPositions = [];
  var enemyXPositions = [];
  var avatarX = 0;
  var avatarY = 0;
  var img_avatar;
  var img_enemy;


  // Connect to PeerJS, have server assign an ID instead of providing one
  // Showing off some of the configs available with PeerJS :).
  //connexió al PeerJS server 
  var peer = new Peer({
  // Set API key for cloud server (you don't need this if you're running your
  // own.
  key: 'x7fwx2kavpy6tj4i',

  // Set highest debug level (log everything!).
  debug: 3,

    // Set a logging function:
    logFunction: function() {
      var copy = Array.prototype.slice.call(arguments).join(' ');
      $('.log').append(copy + '<br>');
    }
  });
  //fi de la conf del server//
  
    
  var connectedPeers = {};

  //mostrar id aleatori 
  peer.on('open', function(id){
    $('#pid').text(id);
    
  });

  // Esperant les connexions
  peer.on('connection', connect);

  // Handle a connection object.
  function connect(c) {
    
    // Handle a chat connection.
    if (c.label === 'chat') {
       
      //connexió OK--inciar el joc
      setInterval(hola,100);
      setUpGame();
       
      /*CREACIÓ DEL XAT MOSTRANT ID DEL CLIENT */
      var chatbox = $('<div></div>').addClass('connection').addClass('active').attr('id', c.peer);
      var header = $('<h1></h1>').html('Chat with <strong>' + c.peer + '</strong>');
      var messages = $('<div><em>Connexió establerta.</em></div>').addClass('messages');
      //c.peer id del client.
      
      
      //append dels atributs creats anteriorment
      chatbox.append(header);
      chatbox.append(messages);
  
            
      //Seleccionar handler de la connexió
      //Quant fem click a chatbox...
      chatbox.on('click', function() {
	//Si l'index de l'atribut "active" és igual a -1 
	if ($(this).attr('class').indexOf('active') === -1) {
	  //si no existeix afeigeix la Classe sino elimina la classe.
	  $(this).addClass('active');
	} else {
	  $(this).removeClass('active');
	}
      });
      
      
      //Oculta el div que diu q no hi ha connexions ja que la connexió s¡ha establert.
      $('.filler').hide();
      //afegim el xat al div a connections
      $('#connections').append(chatbox);

      
      //L'event data s'envia quan es reben les dades de connexió
      c.on('data', function(data)
      {
	//append dels missatges que envien
	messages.append('<div><span class="peer">' + c.peer + '</span>: '+ data +'</div>');
      });
      
      
      //si actualitza la pag o marxa la connexió és queda close.
      c.on('close', function() {
	//alert que t'avisa que l'usuari ha marxat de la pàgina
	alert(c.peer + ' has left the chat.');
	//elimina el chat
	chatbox.remove();
	
	//si la connexió és = 0 vol dir que no hi ha connexió per tant
	//mostra el div amb el text "no hi ha connexió establerta"
	if ($('.connection').length === 0) {
	     $('.filler').show();
	}
	
	//eliminar/finalitza "la connexió" (el client) de la variable connectedPeers
	console.log("c.peer left"+connectedPeers[c.peer]);
	delete connectedPeers[c.peer];
      });
      
    }
    connectedPeers[c.peer] = 1;
  }
  
   // Connect to a peer
   $('#connect').click(function() {
     requestedPeer = $('#rid').val();
     if (!connectedPeers[requestedPeer]) {
	// Create 2 connections, one labelled chat and another labelled file.
	var c = peer.connect(requestedPeer, {
	  label: 'chat',
	  serialization: 'none',
	  metadata: {message: 'hi i want to chat with you!'}
	});
	
	//creació de les dos connexions
	c.on('open', function() {
	  connect(c);
	});
	
	c.on('error', function(err) { alert(err); });
	var f = peer.connect(requestedPeer, { label: 'file', reliable: true });
	
	f.on('open', function() {
	  connect(f);
	});
	f.on('error', function(err) { alert(err); });
      }
      connectedPeers[requestedPeer] = 1;
    });

    // Close a connection.
    $('#close').click(function() {
      eachActiveConnection(function(c) {
	c.close();
      });
    });

    // Send a chat message to all active connections.
    $('#send').submit(function(e) {
      e.preventDefault();
      // For each active connection, send the message.
      var msg = $('#text').val();
      eachActiveConnection(function(c, $c) {
	if (c.label === 'chat') {
	  
	  //setInterval(handleTick, 25);
	  c.send(msg);
	  $c.find('.messages').append('<div><span class="you">You: </span>' + msg
	    + '</div>');
	}
      });
      $('#text').val('');
      $('#text').focus();
    });

    
     function hola() {
	eachActiveConnection(function(c, $c) {
	  if (c.label === 'chat') {
	    var current_enemies = 0;
	    var num_enemies = enemyXPositions.length;
	    
	    if (Math.random() < 1/20)
	    {
		    enemyYPositions.push(0);
		    enemyXPositions.push(Math.random() * 400);
	    }
	    console.log(enemyXPositions);
	    handleTick(current_enemies,num_enemies);
	  }
	});
    };


    // Goes through each active peer and calls FN on its connections.
    //passa per els interlocutors actius i agafa FN
    function eachActiveConnection(fn) {
      var actives = $('.active');
      //var per les ids...
      var checkedIds = {};
      
      //funció que agafa les connexions actives.
      actives.each(function() {
	var peerId = $(this).attr('id');
	//si la connexions actives son diferent al peerID la meva id
	if (!checkedIds[peerId]) {
	  var conns = peer.connections[peerId];
	  for (var i = 0, ii = conns.length; i < ii; i += 1) {
	    var conn = conns[i];
	    fn(conn, $(this));
	  }
	}

	checkedIds[peerId] = 1;
      });
    }

    // mostraversió del navegador
    $('#browsers').text(navigator.userAgent);

    

    // Make sure things clean up properly.//netejar
    window.onunload = window.onbeforeunload = function(e) {
      if (!!peer && !peer.destroyed) {
	peer.destroy();
      }
    };

    
  /****************************************************************/  
  //funcions del joc
  function setUpGame() {
	  var gameCanvas = document.getElementById("gameCanvas");
	  img_avatar = new Image();
	  img_enemy = new Image();
	  img_enemy.src = "img/enemy.png";
	  img_avatar.src = "img/avatar.png";
	  
	  gameCanvas.getContext("2d").drawImage(img_avatar, Math.random() * 100, Math.random() * 100);
	  
	  gameCanvas.addEventListener("mousemove", handleMouseMovement);
	  //setInterval(handleTick, 25);
  }

  function handleMouseMovement(mouseEvent) {
	  avatarX = mouseEvent.offsetX;
	  avatarY = mouseEvent.offsetY;
  }

  function handleTick(current_enemies,num_enemies) {
	  var gameCanvas = document.getElementById("gameCanvas");

	  while (current_enemies < num_enemies) {
		  enemyYPositions[current_enemies] = enemyYPositions[current_enemies] + 1;
		  current_enemies = current_enemies + 1;
	  }
	  
	  gameCanvas.width = 400;		//this erases the contents of the canvas
	  gameCanvas.getContext("2d").drawImage(img_avatar, avatarX, avatarY);
	  
	  current_enemies = 0;
	  while (current_enemies < num_enemies) {
		  gameCanvas.getContext("2d").drawImage(img_enemy, enemyXPositions[current_enemies], enemyYPositions[current_enemies]);
		  current_enemies = current_enemies + 1;
	  }
	  
	  current_enemies = 0;
	  while (current_enemies < num_enemies) {
		  if ( ( (avatarX < enemyXPositions[current_enemies] && enemyXPositions[current_enemies] < avatarX + 30) || (enemyXPositions[current_enemies] < avatarX && avatarX < enemyXPositions[current_enemies] + 30) ) && ( (avatarY < enemyYPositions[current_enemies] && enemyYPositions[current_enemies] < avatarY + 33) || (enemyYPositions[current_enemies] < avatarY && avatarY < enemyYPositions[current_enemies] + 30) ) ) {
			  console.log("You hit an enemy!");
		  }
		  current_enemies = current_enemies + 1;
	  }	
  }

 

}